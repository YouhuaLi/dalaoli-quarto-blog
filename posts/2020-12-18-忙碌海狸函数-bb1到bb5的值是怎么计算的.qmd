---
title: '“忙碌海狸函数”-BB(1)到BB(5)的值是怎么计算的'
date: "2020-12-18"
categories:
  - "Uncategorized"
  - "图灵机"
  - "大数"
---

不久前我写了这篇<a href="https://zhuanlan.zhihu.com/p/145975481">文章</a>，聊了“忙碌海狸函数”, Busy Beaver function。 ”忙碌海狸函数“BB(n)的一大性质是：它是一个“不可计算数”。

文章后面的留言中有人问：既然BB(n)是不可计算数，那么现在是怎么确定BB(1)到BB(5)的值的？本文就介绍下BB(1)到BB(5)是如何确定的。

文章开始前需要的准备知识和一些术语的定义：

图灵机：可以看我的这篇<a href="https://zhuanlan.zhihu.com/p/143834012">介绍</a>。 以及知乎中的众多介绍。
“海狸图灵机”：单条纸带，2个符号的图灵机，这两个符号通常用"0"和“1"表示。并且纸带初始状态全为“空”，本文中有时也用"_"表示“空”符号。

“忙碌海狸”和BB(n)：对某个自然数n，考虑所有n个状态数的海狸图灵机，状态用0到n-1的自然数标记。取其中所有会停机的，在停机前运行步数最大的那台图灵机，称为“忙碌海狸”（Busy Beaver），该步数称为Busy Beaver函数，记作BB(n)。有些文章中，把停机前输出最多1的那台机器称为“忙碌海狸”。因为步数最大比较直观易理解，本文中把BB(n)定义为最大步数。我把n-状态的可停机的海狸图灵机中，停机时能输出的最多1的那台称为“涂鸦海狸”，输出的1的数量记作$\Sigma(n)$。

图灵机的指令记号说明：
每一条图灵机指令有两个输入：当前纸带符号和内部状态。对n状态的海狸图灵机来说，只有*,1两个符号。所以输入集为：${*,1}\times{0,..,n-1}$
图灵机指令有三个输出：对当前纸带位置的输出，只有 0、1两种可能；新的状态数，有n种可能；读写头移动方向，有两种选择（本问题中不考虑读写头不移动的指令）：L(左）、R(右）。所以，输出集为：${_,1}\times{0,..,n-1}\times{L,R}$。

因本文会使用这个<a href="http://morphett.info/turing/turing.html">在线图灵机模拟器</a>演示图灵机，与该模拟器匹配，本文用如下格式描述一条指令：
<code><当前状态> <当前符号> <新符号> <读写头移动方向> <新状态></code>，比如

<code>0 _ 1 r 1</code>

表示当前状态是0，当前符号是"_"；执行指令后，在当前位置输出符号1，读写头向右移动1格，进入状态1。

根据以上分析，对所有n-状态图灵机，它有2n条指令。每条指令有$2\cdot n \cdot 2=4n$种输出的可能。另外，还有一种halt/停机状态。对海狸图灵机来说，区分彼此的唯一依据是指令集，因此需要考虑的n状态的海狸图灵机一共有：$(4n+4)^{2n}$台。具体数值不重要，重要的是这个数字是有限的。

根据“<a href="https://www.zhihu.com/question/20081359/answer/162329455">停机问题</a>”的不可判定性，可知BB(n)是一个不可计算数。但要注意的是，这里说的“不可计算”是指不存在一种有效算法，去确定BB(n)的值。但是根据之前讨论，n-状态的可停机图灵机数量是有限的，里面总是“存在”一台停机前运行最多步数的机器（如果你能接受“<a href="https://www.zhihu.com/question/49733073/answer/118011956">选择公理</a>”，那么你应该能接受这样的推理） 。对比较小的n，我们可以采取近似枚举的方法确定BB(n)的值。

以下分析以下BB(1)到BB(6)的值。

BB(1): 因为只有一个状态，所以只可能在第一步就迁移到停机状态，否则必然死循环，因此BB(1)=1。

以下是一个BB(1)的在线图灵机模拟器，直接点击 “run" 按钮可以看到图灵机运行一步后停止。

<a href="http://morphett.info/turing/turing.html?1bbfec7a50d178a8a05a007b835ae779">BB(1)模拟器</a>

BB(2)：2状态海狸图灵机共有$(4\times 2+4)^{2\times2}=12^4$台。已经非常多了，但是其中可以快速排除的也不少。另外因为状态数少，可以手动编程调节，找到运行步数最多的那台。1963年，Shen Lin和Tibo Rado确认最终胜出的是这台:

0 _ 1 r 1
0 1 1 l 1
1 _ 1 l 0
1 1 1 l halt</pre>

<a href="http://morphett.info/turing/turing.html?f00fff41cd5c310767558d86687a1032">BB(2)模拟器</a>

通过模拟器，可以看到BB(2)=6，同时在纸带上输出了4个1。恰好这台图灵机也是“涂鸦海狸”，即停机前能在纸带上留下最多1符号的。

BB(3)：同样是Shen Lin在1965年证明了BB(3)=21.

<a href="http://morphett.info/turing/turing.html?97269dd8e813a66759e46510bc5ac4ad">BB(3)模拟器</a>
但BB(3)这个“忙碌海狸”不是“涂鸦海狸”，BB(3)停机时打印了5个1，实际$\Sigma(3)=6$，即打印6个1，执行14步后停机。模拟器<a href="http://morphett.info/turing/turing.html?3059913f8d1f96f2e19814848e9094af">在此</a>。

BB(4)：BB(4)开始问题变得复杂起来。手动观察和调试法不适用了。1974年，Allen H. Brady证明了BB(4)=107（<a href="https://www.ams.org/journals/mcom/1983-40-162/S0025-5718-1983-0689479-6/S0025-5718-1983-0689479-6.pdf">原版论文</a>）。

<a href="http://morphett.info/turing/turing.html?813d4c50bc34053a3fa9bf14d5e26af9">BB(4)模拟器</a>

恰好它也是“涂鸦海狸”，留下13个"1"，即$\Sigma(4)=13$

![enter image description here](https://mathworld.wolfram.com/images/eps-gif/BusyBeaverS_901.gif)(上图：2,3,4状态忙碌海狸在纸带上运动轨迹图，“时间轴”方向为从上到下。图片来源: mathworld)

BB(4)的确定方法相当复杂，由于对每个运行很久的图灵机，并没有直接和确切的方法证明其不停机，因此只能将这些图灵机分类，对每一类单独讨论，用了很多启发式的讨论，证明其不会停机，最终确定了BB(4)。

BB(5)：严格来说，目前并没有确切得到BB(5)的值，目前的记录保持者是1993年Marxen和Buntrock找到的BB(5)=47,176,870(?). （2010年，有人提交了一篇<a href="https://arxiv.org/abs/0908.4013">论文</a>，给出了更大的BB(5)，但是似乎还未得到评议和确认。）

<a href="http://morphett.info/turing/turing.html?0e77e32b549cd0b0362a484ec92768a2">Marxen和Buntrock的BB(5)模拟器</a>
（注意：以上模拟器如果要跑到停机步骤，即使点了"run at full speed"，根据我测算，也需要大约18小时。如果你跑完了或者跑了超过47,176,870步还未结束，请留言告知我一下，感谢）

BB(5)的计算用了如下策略：
枚举所有5状态的海狸图灵机，并且假设$BB(5)<10^{11}$，并且模拟这些图灵机，超过$10^{11}$还未停机的
还未停机的，则倾向于认为它们不会停机。剩下的机器中目前运行步骤的最长就是如上的这台机器。对那些超过$10^{11}$还未停机的图灵机，目前已经确认了绝大多数肯定是不停机的。目前大约还剩下25台特别的<a href="https://github.com/danbriggs/Turing">图灵机</a>，无法确切证明它们不停机，因此BB(5)的最终值要么就是47,176,870，要么就是大于$10^{11}$。

其他的一些关于BB(n)函数的结论和猜想：
BB(n)属于不可计算数，其增长速度非常快，并且最终函数值会超过任何可计算数。比如，TREE(n)是一个知名的大数函数。但存在一个n，使得之后的每个BB(n)>TREE(n)。

一些已知的BB(n)下限：
$BB(6)>7.4\times 10^{36537}$
$BB(7)>10^{10^{10^{10^{18,705,352}}}}$
$BB(18)>葛立恒数$

但是否BB(6)或者BB(7)就已经大于葛立恒数？很难知道。

2016年，有人开发了一个关于哥德巴赫猜想的<a href="https://github.com/adamyedidia/parsimony/blob/master/src/tm/tm2/tm2_files/jared_s_goldbach_tm.tm2">47状态的海狸图灵机</a>，这个图灵机程序枚举了所有偶数，测试其是否能表示成两个质数之和。这个图灵机当前仅当发现一个偶数不能表示成两个质数之和时停机。因此：

当这台图灵机跑了BB(47)步之后还未停机，则证明哥德巴赫猜想为真。问题在于，我们远未能找出BB(47)的值；即使找到，也根本不可能让那台机器运行那么久。

希望此文能帮助各位更好的理解忙碌海狸函数。

参考链接：
http://mrob.com/pub/math/ln-notes1-4.html
https://googology.wikia.org/wiki/Busy_beaver_function#cite_note-3
https://www.scottaaronson.com/papers/bb.pdf
http://www.logique.jussieu.fr/~michel/ha.html#tm32
http://turbotm.de/~heiner/BB/simTM32_bbS.html