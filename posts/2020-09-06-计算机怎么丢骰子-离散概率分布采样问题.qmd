---
title: '计算机怎么丢骰子？-- 离散概率分布采样问题'
date: "2020-09-06"
categories:
  - "每周一题"
---

大家好，我是大老李。不久前我看到一篇麻省理工学院的几名学生发表的<a href="http://math.mit.edu/~freer/papers/SFRM-FLDR-AISTATS-2020.pdf">论文</a>，其中提出了一种新的离散概率分布采样（Discrete Probability Distributions Sampling）算法，我研究了一下这个问题，给大家介绍下。

离散概率分布采样就是解决这种问题：怎么用软件来模拟丢骰子？我需要一系列1-6的数字，这些数字就好像是一个人丢骰子得到的。

当然，用各种编程语言中自带的随机数生成函数，生成1-6的之间随机整数，作为输出就可以达到目的。现在的问题是：请你来设计这样的随机数生成函数，你会怎么做？

第一步，你肯定会想到伪随机数生成（pseudo-random numbers generator）算法。之前有一期<a href="https://www.ximalaya.com/keji/14777844/97934111">节目</a>中我专门聊到过伪随机数生成算法。标准的伪随机数生成算法本质上都是生成一系列（伪）随机二进位，就是0和1，且两者概率相等。

<hr>

“线性同余法”是一种最简单的伪随机数生成算法，以下是它的一种C语言实现，两行代码即可：

<code>static unsigned long int next = 1;    // 种子，每次使用前需变更

int rand(void)                        // 生成伪随机数
{
    next = next * 1103515245 + 12345;
    return (unsigned int) (next / 65536) % 32768;
}
</code></pre>

<hr>

现在的问题就变成，如果用一串随机二进位，来模拟产生其他概率分布的问题，比如模拟一个6面的骰子。

其实也不难，相信很多人能想到这个算法：用伪随机数算法获得3个随机二进位。3位随机二进位有<span class="katex--inline"><span class="katex"><span class="katex-mathml">23=82^3=8</span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.814108em;vertical-align:0;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.814108em;"><span class="" style="top:-3.063em;margin-right:.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:.277778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.277778em;"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0;"></span><span class="mord">8</span></span></span></span></span>中组合。取其中6种，分别表示骰子的6个面的结果，如果不幸产生了另外2种组合，那只有重新来了。这个思路很好，我后面介绍的“拒绝采样”（Rejection Sampling）就是这种思路的一般化。

但现在问题又来了，以上这种算法是模拟丢骰子过程的最佳算法吗？这里又要引出另一个问题：“最佳”的衡量标准是啥？。

一般来说，算法的最重要指标是时间复杂度，其次是空间复杂度。另外，对随机数算法中，还有一个标准是随机二进位的消耗量。比如对上述模拟丢骰子的算法，我们至少要消耗3位随机二进位。每次算法执行是所消耗的随机二进位的“平均值”或者叫“期望值”也是一个衡量算法好坏的一个指标，因为我们希望消耗的随机二进位越少越好。

对计算机来说，随机二进位也是一种资源。伪随机数算法生成二进位本身需要时间，而且连续使用越久越不安全。虽然现在的计算机多数也有一些从外部噪声获取“熵”，来生成随机数的机制，但那个速度相对很慢。且连续使用的话就更不安全了，因为谁都不能证明那些外部噪声中不存在人们可以掌握的规律。

<hr>

RDRND 指令（转自维基百科）：

RDRAND（之前被称为Bull Mountain[1]）是一个计算机指令，用于从芯片上的硬件随机数生成器中获取随机数。所用到的随机数生成器由芯片上的熵池初始化。RDRAND指令在Ivy Bridge架构处理器上可用，该指令也是X86-64和IA-32指令集的一部分。AMD在2015年6月添加了对RdRand指令的支持。

为了初始化另一个为随机数生成器，RDSEED指令被添加到了Intel安全密钥，在Broadwell微架构的CPU上开始支持。RDSEED指令的熵来源自时序线路，并且使用硅片上的热噪声来以3GHz的速度输出随机比特流。这比从RDRAND获得的6.4Gbit/s速率要慢（这两个速率都是所有核心、所有线程共享）。RDSEED用来初始化任意宽度的软件 PRNG，而RDRAND指令适用于需要高质量随机数的应用程序。

<hr>

综上所述，我们产生这样一个问题：如果用随机二进位去模拟各种离散的概率分布，比如均匀或者不均匀的骰子，最佳算法为何？这个问题被称为“离散随机分布采样问题”。

<hr>

什么是采样？

![enter image description here](https://pic1.zhimg.com/80/v2-f679e9807a62b7222fec0d0dc5839f2b_720w.jpg)

“采样”是英语“Sampling”的一个翻译。

Sampling另一个意思是标本采集。你可以这样理解，假设你已经有了某种随机分布规律，比如一个二项分布。那么你想模拟产生一系列这样的随机事件结果，以获得这个随机分布的样本，有点像采集标本，所以用Sampling，中文被译作“采样”。当然，这里的Sampling其实采集“假”的标本，真正的对随机事件的标本采集应该是到现实世界中去记录统计结果。

<hr>

而关于“离散随机分布采样问题”，高德纳和姚期智两位科学家在1976年发表过一个经典结论，他们给出了对这类采样问题，需要消耗的随机二进位期望值的上下限，同时也等价的给出了可以达到的最优的时间复杂度。

<hr>

高德纳介绍 （转自维基百科）：

![enter image description here](https://pic2.zhimg.com/80/v2-e6407606ea254130093eb4dbcec406c9_720w.jpg)

高德纳（英语：Donald Ervin Knuth，音译：唐纳德·尔文·克努斯，1938年1月10日－），出生于美国密尔沃基，著名计算机科学家，斯坦福大学计算机系荣誉退休教授。高德纳教授为现代计算机科学的先驱人物，创造了算法分析的领域，在数个理论计算机科学的分支做出基石一般的贡献。在计算机科学及数学领域发表了多部具广泛影响的论文和著作。1974年图灵奖得主。

高德纳所写的《计算机程序设计艺术》（The Art of Computer Programming）是计算机科学界最受高度敬重的参考书籍之一。他也是排版软件TeX和字体设计系统Metafont的发明人。此外，他还曾提出文学编程的概念，并创造了WEB与CWEB软件，作为文学编程开发工具。

姚期智介绍（转自维基百科）：

![enter image description here](https://pic4.zhimg.com/80/v2-a87e8ae33654dcbc1de305e7f69bc564_720w.jpg)

姚期智祖籍湖北孝感，1946年12月24日出生于上海，因国共内战，幼年随父母移居台湾，在台湾长大、受教育。1967年，姚期智毕业于国立台湾大学，之后赴美国深造。1972年获哈佛大学物理学博士学位，1975年获伊利诺大学香槟分校（UIUC）计算机科学博士学位。

2007年3月29日，姚期智领导成立了北京清华大学理论计算机科学研究中心，并在2010年12月30日领导成立了北京清华大学交叉信息研究院。12月6日，姚期智在新竹国立清华大学应聘担任荣誉讲座。

2015年，姚期智放弃美国国籍。2017年2月21日，由中国科学院外籍院士转为中国科学院院士，加入中国科学院信息技术科学部。

<hr>

高和姚两位科学家在1976年证明，对某个离散概率分布<span class="katex--inline"><span class="katex"><span class="katex-mathml">p:=(p1,p2,...,pn)p:=(p_1, p_2, ..., p_n)</span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.625em;vertical-align:-.19444em;"></span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:.277778em;"></span><span class="mrel">:</span></span><span class="base"><span class="strut" style="height:.36687em;vertical-align:0;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.277778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.301108em;"><span class="" style="top:-2.55em;margin-left:0;margin-right:.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em;"><span class=""></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:.166667em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.301108em;"><span class="" style="top:-2.55em;margin-left:0;margin-right:.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em;"><span class=""></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:.166667em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.166667em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.151392em;"><span class="" style="top:-2.55em;margin-left:0;margin-right:.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em;"><span class=""></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span>进行采样时，每次消耗的随机二进位数量期望值记作<span class="katex--inline"><span class="katex"><span class="katex-mathml">E[LT]E[L_T]</span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em;"></span><span style="margin-right:.05764em;" class="mord mathdefault">E</span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.328331em;"><span class="" style="top:-2.55em;margin-left:0;margin-right:.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span style="margin-right:.13889em;" class="mord mathdefault mtight">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em;"><span class=""></span></span></span></span></span></span><span class="mclose">]</span></span></span></span></span>，有：

<span class="katex--inline"><span class="katex"><span class="katex-mathml">H(p)≤E[LT]<H(p)+2H(p)\leq E[L_T] < H(p)+2</span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em;"></span><span style="margin-right:.08125em;" class="mord mathdefault">H</span><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mclose">)</span><span class="mspace" style="margin-right:.277778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:.277778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em;"></span><span style="margin-right:.05764em;" class="mord mathdefault">E</span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.328331em;"><span class="" style="top:-2.55em;margin-left:0;margin-right:.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span style="margin-right:.13889em;" class="mord mathdefault mtight">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em;"><span class=""></span></span></span></span></span></span><span class="mclose">]</span><span class="mspace" style="margin-right:.277778em;"></span><span class="mrel"><</span><span class="mspace" style="margin-right:.277778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em;"></span><span style="margin-right:.08125em;" class="mord mathdefault">H</span><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mclose">)</span><span class="mspace" style="margin-right:.222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:.222222em;"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0;"></span><span class="mord">2</span></span></span></span></span>

其中<span class="katex--inline"><span class="katex"><span class="katex-mathml">H(p)H(p)</span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em;"></span><span style="margin-right:.08125em;" class="mord mathdefault">H</span><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mclose">)</span></span></span></span></span>为概率分布p的熵，T为采样所使用的DDG Tree（离散概率分布生成树，后文有介绍）。

我之前一期有一期节目标题叫“<a href="https://zhuanlan.zhihu.com/p/89958871">中文是最有效率的语言吗</a>”，其中介绍了信息熵的概念。这里的熵其实就是一回事，也可以被叫做“香农熵”，因为这是香农提出的。本质上，给出一个概率分布我们就能算出这个概率分布的“熵”。

<hr>

给定一个离散概率分布，<span class="katex--inline"><span class="katex"><span class="katex-mathml">p:=(p1,p2,...,pn)p:=(p_1, p_2, ..., p_n)</span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.625em;vertical-align:-.19444em;"></span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:.277778em;"></span><span class="mrel">:</span></span><span class="base"><span class="strut" style="height:.36687em;vertical-align:0;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.277778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.301108em;"><span class="" style="top:-2.55em;margin-left:0;margin-right:.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em;"><span class=""></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:.166667em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.301108em;"><span class="" style="top:-2.55em;margin-left:0;margin-right:.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em;"><span class=""></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:.166667em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.166667em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.151392em;"><span class="" style="top:-2.55em;margin-left:0;margin-right:.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em;"><span class=""></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span>，其信息熵为：

<span class="katex--inline"><span class="katex"><span class="katex-mathml">H=−∑pilog⁡2piH=- \sum {p_i \log_{2}{p_i} }</span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.68333em;vertical-align:0;"></span><span style="margin-right:.08125em;" class="mord mathdefault">H</span><span class="mspace" style="margin-right:.277778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.277778em;"></span></span><span class="base"><span class="strut" style="height:1.00001em;vertical-align:-.25001em;"></span><span class="mord">−</span><span class="mspace" style="margin-right:.166667em;"></span><span class="mop op-symbol small-op" style="position:relative;top:-5.0E-6em;">∑</span><span class="mspace" style="margin-right:.166667em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.311664em;"><span class="" style="top:-2.55em;margin-left:0;margin-right:.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em;"><span class=""></span></span></span></span></span></span><span class="mspace" style="margin-right:.166667em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.206968em;"><span class="" style="top:-2.45586em;margin-right:.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.24414em;"><span class=""></span></span></span></span></span></span><span class="mspace" style="margin-right:.166667em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.311664em;"><span class="" style="top:-2.55em;margin-left:0;margin-right:.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em;"><span class=""></span></span></span></span></span></span></span></span></span></span></span></span>

<hr>

比如，对一个标准的六面骰子，因为每一面的概率是均等的，其信息熵为<span class="katex--inline"><span class="katex"><span class="katex-mathml">log26≈2.584log_{2}{6}\approx 2.584</span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.88888em;vertical-align:-.19444em;"></span><span style="margin-right:.01968em;" class="mord mathdefault">l</span><span class="mord mathdefault">o</span><span class="mord"><span style="margin-right:.03588em;" class="mord mathdefault">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.301108em;"><span class="" style="top:-2.55em;margin-left:-.03588em;margin-right:.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em;"><span class=""></span></span></span></span></span></span><span class="mord"><span class="mord">6</span></span><span class="mspace" style="margin-right:.277778em;"></span><span class="mrel">≈</span><span class="mspace" style="margin-right:.277778em;"></span></span><span class="base"><span class="strut" style="height:.64444em;vertical-align:0;"></span><span class="mord">2</span><span class="mord">.</span><span class="mord">5</span><span class="mord">8</span><span class="mord">4</span></span></span></span></span>。那么根据高德纳和姚期智的结论，模拟一个骰子消耗的随机二进位在2.584到4.584之间，也就是3-5位，这是符合我们之前的直觉的。

再比如，根据我之前关于中文信息熵的文章，中文书面文字的信息熵约为9.56。所以，如果要写一个算法，随机生成汉字，且生成的概率分布符合汉字在书面中文中出现的频率，那么每产生一个汉字，你需要消耗10到12位随机二进位，这个数字应该也是很符合直觉的。其实你再思考下，信息熵实际就是对这个概率分布编码的最短平均长度，那么它是用二进位采样的平均效率就一点不奇怪了。

那具体算法是如何实现如以上的最少的二进位消耗目标呢？对计算机数据结构的听众还是比较简单的，最基本理念就是用“二叉树”。 因为一位随机二进位只有0和1两种取值，那么反映在二叉树上，我们可以用它来决定向左还是向右遍历。

从二叉树的根节点开始，根据一个随机二进位决定访问左边还是右边的分叉。可以知道，第n个二进位之后，你会达到这颗二叉树的第n层，且恰好达到这个节点的概率是 <span class="katex--inline"><span class="katex"><span class="katex-mathml">12n\frac {1}{2^n}</span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.19011em;vertical-align:-.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.845108em;"><span class="" style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.593543em;"><span class="" style="top:-2.786em;margin-right:.0714286em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span><span class="" style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:.04em;"></span></span><span class="" style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.345em;"><span class=""></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span>。

所以，思路就是构造一颗二叉树，对其中的每个叶子节点编号，使得你按以上方法到达每个叶子节点的概率之和是你需要的概率值。

<hr>

比如，要构造一个<span class="katex--inline"><span class="katex"><span class="katex-mathml">(3/10,7/10)(3/10, 7/10)</span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em;"></span><span class="mopen">(</span><span class="mord">3</span><span class="mord">/</span><span class="mord">1</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.166667em;"></span><span class="mord">7</span><span class="mord">/</span><span class="mord">1</span><span class="mord">0</span><span class="mclose">)</span></span></span></span></span>的二项分布，先把这两个数字写成二进制小数形式：

<span class="katex--inline"><span class="katex"><span class="katex-mathml">p1=310=0.01001‾2p_1=\frac{3}{10}=0.0\overline{1001}_2</span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.625em;vertical-align:-.19444em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.301108em;"><span class="" style="top:-2.55em;margin-left:0;margin-right:.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em;"><span class=""></span></span></span></span></span></span><span class="mspace" style="margin-right:.277778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.277778em;"></span></span><span class="base"><span class="strut" style="height:1.19011em;vertical-align:-.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.845108em;"><span class="" style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">0</span></span></span></span><span class="" style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:.04em;"></span></span><span class="" style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.345em;"><span class=""></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:.277778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.277778em;"></span></span><span class="base"><span class="strut" style="height:.99444em;vertical-align:-.15em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">0</span><span class="mord"><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.84444em;"><span class="" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">1</span></span></span><span class="" style="top:-3.76444em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:.04em;"></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.301108em;"><span class="" style="top:-2.55em;margin-right:.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em;"><span class=""></span></span></span></span></span></span></span></span></span></span>

<span class="katex--inline"><span class="katex"><span class="katex-mathml">p2=710=0.10110‾2p_2=\frac{7}{10}=0.1\overline{0110}_2</span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.625em;vertical-align:-.19444em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.301108em;"><span class="" style="top:-2.55em;margin-left:0;margin-right:.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em;"><span class=""></span></span></span></span></span></span><span class="mspace" style="margin-right:.277778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.277778em;"></span></span><span class="base"><span class="strut" style="height:1.19011em;vertical-align:-.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.845108em;"><span class="" style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">0</span></span></span></span><span class="" style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:.04em;"></span></span><span class="" style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">7</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.345em;"><span class=""></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:.277778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.277778em;"></span></span><span class="base"><span class="strut" style="height:.99444em;vertical-align:-.15em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">1</span><span class="mord"><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.84444em;"><span class="" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span><span class="mord">1</span><span class="mord">1</span><span class="mord">0</span></span></span><span class="" style="top:-3.76444em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:.04em;"></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.301108em;"><span class="" style="top:-2.55em;margin-right:.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em;"><span class=""></span></span></span></span></span></span></span></span></span></span>

然后构造DDG树，方法是：根据小数点后第n位出现1，则在第n层的右叶子，标记该叶子为该概率事件，并输出，否则继续向下，直至出现循环小数后回退。比如：

![](https://picb.zhimg.com/80/v2-f844b751ae80c0d86ba0c6a8ecb92139_720w.jpg)

(图片转自[1])

上图左边为最优DDG树。因 <span class="katex--inline"><span class="katex"><span class="katex-mathml">p1p_1</span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.625em;vertical-align:-.19444em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.301108em;"><span class="" style="top:-2.55em;margin-left:0;margin-right:.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em;"><span class=""></span></span></span></span></span></span></span></span></span></span> 在小数点后第2和第5位是1，所以在该树第2和第5层的右叶子标记为<span class="katex--inline"><span class="katex"><span class="katex-mathml">p1p_1</span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.625em;vertical-align:-.19444em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.301108em;"><span class="" style="top:-2.55em;margin-left:0;margin-right:.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em;"><span class=""></span></span></span></span></span></span></span></span></span></span>事件，对<span class="katex--inline"><span class="katex"><span class="katex-mathml">p2p_2</span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.625em;vertical-align:-.19444em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.301108em;"><span class="" style="top:-2.55em;margin-left:0;margin-right:.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.15em;"><span class=""></span></span></span></span></span></span></span></span></span></span>同样处理。红色箭头表示循环小数的发生，从而可以回退，重用之前的树结构。

右图为次优DDG树，层数较少，但是红色返回箭头更多，从而需要消耗更多的二进位。

<hr>

这种二叉树，被称为离散分布生成树，简称DDG树（Discrete Distribution Generation Tree）。DDG树就是用<span class="katex--inline"><span class="katex"><span class="katex-mathml">12n\frac{1}{2^n}</span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.19011em;vertical-align:-.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.845108em;"><span class="" style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.593543em;"><span class="" style="top:-2.786em;margin-right:.0714286em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span><span class="" style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:.04em;"></span></span><span class="" style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.345em;"><span class=""></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span>逼近概率值。理论上，除非概率分布值恰好分母都是2的幂次，否则就需要无穷深度的二叉树。当然实际应用中，因为有循环小数的关系，不需要真的存储一个无穷深的二叉树。可以部分重用之前的树结构，所以这种树还有些自相似和分形的特性。

而每次访问DDG数的平均深度，就是每次采样平均需要消耗的二进位数量。高德纳和姚期智两位证明了，平均访问的深度是概率分布的熵值，到熵+2之间。这也是时间上最优的算法。

但你也发现这个算法的一个缺陷是存储空间上不太有效率。这个存储空间是不单与概率分布取值多少有关，还与概率取值的二进制小数位数有关。如果小数循环有10位，那么就需要10层深度的树。这样，对那些熵很小的分布，树的最下面几层很可能是用不到的，但又不得不存储，这不是很理想，所以人们就开始思考可能的改进方法。

举个极端的例子，假如采样一个二项分布<span class="katex--inline"><span class="katex"><span class="katex-mathml">(1π,1−1π)(\frac{1}{\pi} , 1-\frac{1}{\pi})</span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.19011em;vertical-align:-.345em;"></span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.845108em;"><span class="" style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span style="margin-right:.03588em;" class="mord mathdefault mtight">π</span></span></span></span><span class="" style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:.04em;"></span></span><span class="" style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.345em;"><span class=""></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:.166667em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:.222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.222222em;"></span></span><span class="base"><span class="strut" style="height:1.19011em;vertical-align:-.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.845108em;"><span class="" style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span style="margin-right:.03588em;" class="mord mathdefault mtight">π</span></span></span></span><span class="" style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:.04em;"></span></span><span class="" style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.345em;"><span class=""></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span></span></span></span></span>。理论上，用DDG树对这种概率分布进行采样的话，需要无穷深度的树。

有一种改进方法，被称为“拒绝采样”- rejection sampling，基本思想就是用一种比较容易采样的方法去模拟比较困难的概率分布。每次采样后，看输出结果是否在需要的概率分布内，如果不在范围内则丢弃，重新开始采样，这部分结果被“拒绝”，所以称为“拒绝采样”。

<hr>

一个”拒绝采样“的例子：

![(插入图片)](https://pic3.zhimg.com/v2-906b740ac37cc486b3b9cbf6e58a29ea_b.png)

对<span class="katex--inline"><span class="katex"><span class="katex-mathml">(1π,1−1π)(\frac{1}{\pi} , 1-\frac{1}{\pi})</span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.19011em;vertical-align:-.345em;"></span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.845108em;"><span class="" style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span style="margin-right:.03588em;" class="mord mathdefault mtight">π</span></span></span></span><span class="" style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:.04em;"></span></span><span class="" style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.345em;"><span class=""></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:.166667em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:.222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.222222em;"></span></span><span class="base"><span class="strut" style="height:1.19011em;vertical-align:-.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.845108em;"><span class="" style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span style="margin-right:.03588em;" class="mord mathdefault mtight">π</span></span></span></span><span class="" style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:.04em;"></span></span><span class="" style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.345em;"><span class=""></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span></span></span></span></span>这样的概率事件，因为有<span class="katex--inline"><span class="katex"><span class="katex-mathml">π\pi</span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.43056em;vertical-align:0;"></span><span style="margin-right:.03588em;" class="mord mathdefault">π</span></span></span></span></span>，我们就会想到圆。

一个半径为1的圆，它的面积是<span class="katex--inline"><span class="katex"><span class="katex-mathml">π\pi</span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.43056em;vertical-align:0;"></span><span style="margin-right:.03588em;" class="mord mathdefault">π</span></span></span></span></span>。在这个单位圆内，考虑一个边长为1的正方形，它的面积为1。如果我们可以均匀的生成单位圆内的点，根据这个点是否在这个圆内部的这正方形内，我们可以决定这个概率事件的输出。这个采样的分布恰好是<span class="katex--inline"><span class="katex"><span class="katex-mathml">(1π,1−1π)(\frac{1}{\pi} , 1-\frac{1}{\pi})</span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.19011em;vertical-align:-.345em;"></span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.845108em;"><span class="" style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span style="margin-right:.03588em;" class="mord mathdefault mtight">π</span></span></span></span><span class="" style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:.04em;"></span></span><span class="" style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.345em;"><span class=""></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:.166667em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:.222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.222222em;"></span></span><span class="base"><span class="strut" style="height:1.19011em;vertical-align:-.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.845108em;"><span class="" style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span style="margin-right:.03588em;" class="mord mathdefault mtight">π</span></span></span></span><span class="" style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:.04em;"></span></span><span class="" style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.345em;"><span class=""></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span></span></span></span></span>。

但是，直接生成均匀分布在一个圆内的点又是很困难的，所以我们改成均匀生成这个圆的外接正方形内的点。看生成的点是否在这个圆内，如果是，则接受这个结果，并产生输出；如果不是则拒绝这个结果，重新开始。

均匀产生一个正方形内的点是比较容易的，你只要均匀的在某范围产生两个数字，作为这个点的坐标就可以了。

这样，用相对简单方式，就可以对 <span class="katex--inline"><span class="katex"><span class="katex-mathml">(1π,1−1π)(\frac{1}{\pi} , 1-\frac{1}{\pi})</span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.19011em;vertical-align:-.345em;"></span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.845108em;"><span class="" style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span style="margin-right:.03588em;" class="mord mathdefault mtight">π</span></span></span></span><span class="" style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:.04em;"></span></span><span class="" style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.345em;"><span class=""></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:.166667em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:.222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:.222222em;"></span></span><span class="base"><span class="strut" style="height:1.19011em;vertical-align:-.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.845108em;"><span class="" style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span style="margin-right:.03588em;" class="mord mathdefault mtight">π</span></span></span></span><span class="" style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:.04em;"></span></span><span class="" style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.345em;"><span class=""></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span></span></span></span></span>概率分布进行采样，代价是采样过程中，会丢弃一些结果，导致总体执行时间变长。这就是“拒绝采样”的理念。

<hr>

那有没有时间上不增加太多，又节省空间的两全其美的算法呢？这次，MIT研究者新发表的这种随机采样算法，某种程度上达到了两全其美。这种算法的名称称为Fast Loaded Dice Roller，简称<a href="https://github.com/probcomp/fast-loaded-dice-roller">FLDR</a>，字面意思是“快速的丢一个灌铅的骰子”，也就是不均匀骰子。当然，这个名称并不是说这个算法只能用来模拟骰子，它只是形象的告诉你这个算法的用途。

FLDR思路其实也很简单，它起始就是在DDG树的基础上，引入“拒绝采样”。在DDG树中，我们会发现如果概率事件的概率值分母都是<span class="katex--inline"><span class="katex"><span class="katex-mathml">2n2^n</span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:.664392em;vertical-align:0;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:.664392em;"><span class="" style="top:-3.063em;margin-right:.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span></span>的形式，那么它只需要有限的深度，是最理想的一种情况。那么我们就可以考虑把概率事件的概率值都写成分母是2的幂次的形式，再增加一个余项补齐，把这个余项作为后来Rejection Sampling中被拒绝的那部分。

举个例子，比如采样的二项分布的概率是<span class="katex--inline"><span class="katex"><span class="katex-mathml">(3/7,4/7)(3/7, 4/7)</span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em;"></span><span class="mopen">(</span><span class="mord">3</span><span class="mord">/</span><span class="mord">7</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.166667em;"></span><span class="mord">4</span><span class="mord">/</span><span class="mord">7</span><span class="mclose">)</span></span></span></span></span>，那你把分母向2的幂次对齐，那么就是3/8和4/8，也就是1/2。但这两个概率值相加不为1，需要补一个1/8。于是就改成对<span class="katex--inline"><span class="katex"><span class="katex-mathml">(3/8,1/2,1/8)(3/8, 1/2, 1/8)</span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-.25em;"></span><span class="mopen">(</span><span class="mord">3</span><span class="mord">/</span><span class="mord">8</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.166667em;"></span><span class="mord">1</span><span class="mord">/</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:.166667em;"></span><span class="mord">1</span><span class="mord">/</span><span class="mord">8</span><span class="mclose">)</span></span></span></span></span>进行采样。对这个三项分布你可以很容易构造出一棵深度为3的DDG tree，如果采样结果落到了你额外增加的那个1/8上，则丢弃这次采样重新开始。

<hr>

![（插入图片）](https://pic1.zhimg.com/v2-bd35825c448b1aaaa3003156855e0a4c_b.png)

使用DDG tree和FLDR树对(1/5，4/5)分布采样的例子：

左图为最优DDG树，需要4层。

右图为FLDR树，改为对(1/8, 1/2, 3/8)分布构造树结构，只需3层，但会发生更多的回溯。

<hr>

再比如，如果用FLDR算法模拟一个正六面骰子，FLDR不是采样<span class="katex--inline"><span class="katex"><span class="katex-mathml">6个166个\frac{1}{6}</span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.19011em;vertical-align:-.345em;"></span><span class="mord">6</span><span class="mord cjk_fallback">个</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.845108em;"><span class="" style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span></span></span></span><span class="" style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:.04em;"></span></span><span class="" style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.345em;"><span class=""></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span>，而是采样6个6个<span class="katex--inline"><span class="katex"><span class="katex-mathml">18\frac{1}{8}</span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.19011em;vertical-align:-.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.845108em;"><span class="" style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">8</span></span></span></span><span class="" style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:.04em;"></span></span><span class="" style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.345em;"><span class=""></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span>，一个<span class="katex--inline"><span class="katex"><span class="katex-mathml">28=14\frac{2}{8}=\frac{1}{4}</span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.19011em;vertical-align:-.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.845108em;"><span class="" style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">8</span></span></span></span><span class="" style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:.04em;"></span></span><span class="" style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.345em;"><span class=""></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:.277778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:.277778em;"></span></span><span class="base"><span class="strut" style="height:1.19011em;vertical-align:-.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.845108em;"><span class="" style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span></span></span></span><span class="" style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:.04em;"></span></span><span class="" style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.345em;"><span class=""></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span>，也就是7项的一个分布。同样你只需要一个三层的DDG树。如果结果落到那个增加的<span class="katex--inline"><span class="katex"><span class="katex-mathml">14\frac{1}{4}</span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.19011em;vertical-align:-.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:.845108em;"><span class="" style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span></span></span></span><span class="" style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:.04em;"></span></span><span class="" style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:.345em;"><span class=""></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span>，则重新开始。你会发现这个方法其实是与文章开头部分，各位直觉中用电脑模拟骰子的思路是一样的，所以FLDR并不算特别新奇。

论文作者其实是把我们直觉中的这种思路一般化，并且做了数学分析。他们证明这种情况下他们的算法在空间消耗上是与概率小数点后的位数的对数成正比。而原版的DDR则是与小数点位数成比例的增加，所以FLDR在空间上比较节省许多。

时间效率上，因为需要丢弃一些采样结果，比原版DDG需要多消耗一些二进位。但他们证明它们算法比原版的DDG tree算法增加的二进位消耗不超过4位，所以是可以接受的一个结果。

今天跟大家聊了下用电脑怎么来丢骰子以及模拟各种概率分布。我个人比较意外的是信息熵在此处不经意的出现，以及二叉树在此处的经典运用。而拒绝采样的理念也是值得我们自己好好玩味的。

今天的节目就到这里，我们下期再见。

参考资料

<a href="https://www.keithschwarz.com/darts-dice-coins/">https://www.keithschwarz.com/darts-dice-coins/</a>

<a href="http://math.mit.edu/~freer/papers/SFRM-FLDR-AISTATS-2020.pdf">http://math.mit.edu/~freer/papers/SFRM-FLDR-AISTATS-2020.pdf</a>

<a href="https://www.quantamagazine.org/how-and-why-computers-roll-loaded-dice-20200708/">https://www.quantamagazine.org/how-and-why-computers-roll-loaded-dice-20200708/</a>